const Blog = require('../models/Blog');
const User = require('../models/User');
const multer = require('multer');
const path = require('path');
const fsPromises = require('fs').promises;


// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, path.join(__dirname, '../images/blogImages')); // Adjust the path to your image directory
//   },
//   filename: (req, file, cb) => {
//     const imageExtension = path.extname(file.originalname);
//     const newImageName = `${Date.now()}${imageExtension}`; // Generate a unique name
//     cb(null, newImageName);
//   },
// });

// const upload = multer({ storage });


// Create a new blog (user must be logged in)

const createBlog = async (req, res) => {
  const { title, user_id, sections } = req.body.data;
  try {
    // const newSections = [];
    // console.log("to check the sections", req.body.data);

    // for (const section of sections) {
    //   if (section.image) {
    //     const imageFile = req.files[`sections[${sections.indexOf(section)}][image]`][0]; // Get the corresponding image file
    //     const newImageName = imageFile.filename; // Use the filename generated by multer

    //     // Update the section's image field with the new image path/name
    //     const newSection = {
    //       ...section,
    //       image: newImageName,
    //     };

    //     newSections.push(newSection);
    //   }
    // }
    console.log("maincontent",title, user_id, sections)
    const newBlog = new Blog({
      title,
      user_id,
      sections,
    });

    const savedBlog = await newBlog.save();

    // Add blog ID to user's blog section
    await User.findByIdAndUpdate(user_id, { $push: { blogs: savedBlog._id } });

    res.status(201).json(newBlog);
  } catch (error) {
    res.status(400).json({ message: 'Error creating blog' });
  }
};


// const createBlog = async (req, res) => {
//   const { title, user_id, sections } = req.body.data;
//   try {
//     const newSections = [];

//     for (const section of sections) {
//       if (section.image) {
//         const imageExtension = section.image.File.substring(section.image.lastIndexOf('.'));
        
//         const newImageName = `${Date.now()}${imageExtension}`; // Generate a unique name
        
//         const imageBuffer = Buffer.from(section.image, 'base64'); // Convert base64 to buffer

//         // Save the image to the server
//         await fsPromises.writeFile(`../images/blogImages/${newImageName}`, imageBuffer);

//         // Update the section's image field with the new image path/name
//         const newSection = {
//           ...section,
//           image: newImageName,
//         };

//         newSections.push(newSection);
//       }
//     }

//     const newBlog = new Blog({
//       title,
//       user_id,
//       sections: newSections,
//     });

//     // const savedBlog = await newBlog.save();

//     // // Add blog ID to user's blog section
//     // await User.findByIdAndUpdate(user_id, { $push: { blogs: savedBlog._id } });

//     res.status(201).json(savedBlog);
//   } catch (error) {
//     res.status(400).json({ message: 'Error creating blog' });
//   }
// };


// Get all blogs
const getAllBlogs = async (req, res) => {
  try {
    const blogs = await Blog.find();
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

const getAllActiveBlogs = async (req, res) => {
  try {
    const activeBlogs = await Blog.find({ status: true }); // Fetch only active blogs
    res.json(activeBlogs);
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

// Get all blogs by user ID
const getAllBlogsByUserId = async (req, res) => {
  const user_id = req.params.userId;
  console.log(user_id)
  try {
    const blogs = await Blog.find({ user_id });
    console.log(blogs)
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

// Add a comment to a blog by ID
const addComment = async (req, res) => {
  const blogId = req.params.blogId;
  const { comment } = req.body;

  try {
    const updatedBlog = await Blog.findByIdAndUpdate(blogId, { $push: { comments: { comment } } }, { new: true });
    res.json(updatedBlog);
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

// Change status of a blog by ID
const changeBlogStatus = async (req, res) => {
  const blogId = req.params.blogId;
  const { status } = req.body;

  try {
    const updatedBlog = await Blog.findByIdAndUpdate(blogId, { status }, { new: true });
    res.json(updatedBlog);
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

// Change status of a comment by ID
const changeCommentStatus = async (req, res) => {
    const blogId = req.params.blogId;
    const commentIndex = req.params.commentIndex; // Use the index provided from frontend
    const { is_active } = req.body;
  
    try {
      const updatedBlog = await Blog.findOneAndUpdate(
        { _id: blogId },
        { $set: { [`comments.${commentIndex}.is_active`]: is_active } },
        { new: true }
      );
      res.json(updatedBlog);
    } catch (error) {
      res.status(500).json({ message: 'An error occurred' });
    }
  };

module.exports = { createBlog,getAllActiveBlogs, getAllBlogs, getAllBlogsByUserId, addComment, changeBlogStatus, changeCommentStatus };
